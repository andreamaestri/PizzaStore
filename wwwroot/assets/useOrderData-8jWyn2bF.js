import{r as c}from"./index-qK0o-Q92.js";const i="/api/orders",f={"Content-Type":"application/json"},T=async()=>{const s=await fetch(i);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);return await s.json()},j=async s=>{const t=await fetch(`${i}/${s}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()},N=async s=>{const t=await fetch(i,{method:"POST",headers:f,body:JSON.stringify(s)});if(!t.ok)throw new Error(`Failed to create order (Status: ${t.status})`);return await t.json()},P=async(s,t)=>{const l=await fetch(`${i}/${s}/status`,{method:"PUT",headers:f,body:JSON.stringify(t)});if(!l.ok)throw new Error(`Failed to update order status (Status: ${l.status})`);return await l.json()},I=async s=>{const t=await fetch(`${i}/${s}`,{method:"DELETE",headers:f});if(!t.ok)throw new Error(`Failed to cancel order (Status: ${t.status})`);return!0},d={fetchOrders:T,fetchOrderById:j,createOrder:N,updateOrderStatus:P,cancelOrder:I};function F(){const[s,t]=c.useState([]),[l,O]=c.useState(null),[w,o]=c.useState(!1),[p,u]=c.useState(null),[$,y]=c.useState({open:!1,message:"",severity:"success"}),a=c.useCallback((e,r="success")=>{y({open:!0,message:e,severity:r})},[]),g=()=>{y(e=>({...e,open:!1}))},E=c.useCallback(async()=>{o(!0),u(null);try{const e=await d.fetchOrders();return t(e),e}catch(e){return u(e),a(`Error fetching orders: ${e.message}`,"error"),[]}finally{o(!1)}},[a]),S=c.useCallback(async e=>{o(!0),u(null);try{const r=await d.fetchOrderById(e);return O(r),r}catch(r){return u(r),a(`Error fetching order: ${r.message}`,"error"),null}finally{o(!1)}},[a]),m=c.useCallback(async e=>{o(!0),u(null);try{const r=await d.createOrder(e);return t(n=>[...n,r]),a("Order placed successfully!","success"),r}catch(r){return u(r),a(`Error creating order: ${r.message}`,"error"),null}finally{o(!1)}},[a]),k=c.useCallback(async(e,r)=>{o(!0),u(null);try{const n=await d.updateOrderStatus(e,r);return t(b=>b.map(h=>h.id===n.id?n:h)),a("Order status updated successfully","success"),n}catch(n){return u(n),a(`Error updating order status: ${n.message}`,"error"),null}finally{o(!1)}},[a]),C=c.useCallback(async e=>{o(!0),u(null);try{return await d.cancelOrder(e),t(r=>r.map(n=>n.id===e?{...n,status:"Cancelled"}:n)),a("Order cancelled successfully","success"),!0}catch(r){return u(r),a(`Error cancelling order: ${r.message}`,"error"),!1}finally{o(!1)}},[a]);return{orders:s,currentOrder:l,loading:w,error:p,notification:$,fetchOrders:E,fetchOrderById:S,createOrder:m,updateOrderStatus:k,cancelOrder:C,closeNotification:g}}export{F as u};
